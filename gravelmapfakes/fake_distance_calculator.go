// Code generated by counterfeiter. DO NOT EDIT.
package gravelmapfakes

import (
	"sync"

	"github.com/thanosKontos/gravelmap"
)

type FakeDistanceCalculator struct {
	CalculateStub        func(gravelmap.Point, gravelmap.Point) int64
	calculateMutex       sync.RWMutex
	calculateArgsForCall []struct {
		arg1 gravelmap.Point
		arg2 gravelmap.Point
	}
	calculateReturns struct {
		result1 int64
	}
	calculateReturnsOnCall map[int]struct {
		result1 int64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDistanceCalculator) Calculate(arg1 gravelmap.Point, arg2 gravelmap.Point) int64 {
	fake.calculateMutex.Lock()
	ret, specificReturn := fake.calculateReturnsOnCall[len(fake.calculateArgsForCall)]
	fake.calculateArgsForCall = append(fake.calculateArgsForCall, struct {
		arg1 gravelmap.Point
		arg2 gravelmap.Point
	}{arg1, arg2})
	fake.recordInvocation("Calculate", []interface{}{arg1, arg2})
	fake.calculateMutex.Unlock()
	if fake.CalculateStub != nil {
		return fake.CalculateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.calculateReturns
	return fakeReturns.result1
}

func (fake *FakeDistanceCalculator) CalculateCallCount() int {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return len(fake.calculateArgsForCall)
}

func (fake *FakeDistanceCalculator) CalculateCalls(stub func(gravelmap.Point, gravelmap.Point) int64) {
	fake.calculateMutex.Lock()
	defer fake.calculateMutex.Unlock()
	fake.CalculateStub = stub
}

func (fake *FakeDistanceCalculator) CalculateArgsForCall(i int) (gravelmap.Point, gravelmap.Point) {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	argsForCall := fake.calculateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDistanceCalculator) CalculateReturns(result1 int64) {
	fake.calculateMutex.Lock()
	defer fake.calculateMutex.Unlock()
	fake.CalculateStub = nil
	fake.calculateReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeDistanceCalculator) CalculateReturnsOnCall(i int, result1 int64) {
	fake.calculateMutex.Lock()
	defer fake.calculateMutex.Unlock()
	fake.CalculateStub = nil
	if fake.calculateReturnsOnCall == nil {
		fake.calculateReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.calculateReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeDistanceCalculator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDistanceCalculator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gravelmap.DistanceCalculator = new(FakeDistanceCalculator)
