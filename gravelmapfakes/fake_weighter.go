// Code generated by counterfeiter. DO NOT EDIT.
package gravelmapfakes

import (
	"sync"

	"github.com/thanosKontos/gravelmap"
)

type FakeWeighter struct {
	WeightElevationStub        func(*gravelmap.WayElevation) gravelmap.Weight
	weightElevationMutex       sync.RWMutex
	weightElevationArgsForCall []struct {
		arg1 *gravelmap.WayElevation
	}
	weightElevationReturns struct {
		result1 gravelmap.Weight
	}
	weightElevationReturnsOnCall map[int]struct {
		result1 gravelmap.Weight
	}
	WeightOffRoadStub        func(int8) float64
	weightOffRoadMutex       sync.RWMutex
	weightOffRoadArgsForCall []struct {
		arg1 int8
	}
	weightOffRoadReturns struct {
		result1 float64
	}
	weightOffRoadReturnsOnCall map[int]struct {
		result1 float64
	}
	WeightVehicleAcceptanceStub        func(map[string]string) float64
	weightVehicleAcceptanceMutex       sync.RWMutex
	weightVehicleAcceptanceArgsForCall []struct {
		arg1 map[string]string
	}
	weightVehicleAcceptanceReturns struct {
		result1 float64
	}
	weightVehicleAcceptanceReturnsOnCall map[int]struct {
		result1 float64
	}
	WeightWayAcceptanceStub        func(map[string]string) gravelmap.Weight
	weightWayAcceptanceMutex       sync.RWMutex
	weightWayAcceptanceArgsForCall []struct {
		arg1 map[string]string
	}
	weightWayAcceptanceReturns struct {
		result1 gravelmap.Weight
	}
	weightWayAcceptanceReturnsOnCall map[int]struct {
		result1 gravelmap.Weight
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWeighter) WeightElevation(arg1 *gravelmap.WayElevation) gravelmap.Weight {
	fake.weightElevationMutex.Lock()
	ret, specificReturn := fake.weightElevationReturnsOnCall[len(fake.weightElevationArgsForCall)]
	fake.weightElevationArgsForCall = append(fake.weightElevationArgsForCall, struct {
		arg1 *gravelmap.WayElevation
	}{arg1})
	fake.recordInvocation("WeightElevation", []interface{}{arg1})
	fake.weightElevationMutex.Unlock()
	if fake.WeightElevationStub != nil {
		return fake.WeightElevationStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.weightElevationReturns
	return fakeReturns.result1
}

func (fake *FakeWeighter) WeightElevationCallCount() int {
	fake.weightElevationMutex.RLock()
	defer fake.weightElevationMutex.RUnlock()
	return len(fake.weightElevationArgsForCall)
}

func (fake *FakeWeighter) WeightElevationCalls(stub func(*gravelmap.WayElevation) gravelmap.Weight) {
	fake.weightElevationMutex.Lock()
	defer fake.weightElevationMutex.Unlock()
	fake.WeightElevationStub = stub
}

func (fake *FakeWeighter) WeightElevationArgsForCall(i int) *gravelmap.WayElevation {
	fake.weightElevationMutex.RLock()
	defer fake.weightElevationMutex.RUnlock()
	argsForCall := fake.weightElevationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWeighter) WeightElevationReturns(result1 gravelmap.Weight) {
	fake.weightElevationMutex.Lock()
	defer fake.weightElevationMutex.Unlock()
	fake.WeightElevationStub = nil
	fake.weightElevationReturns = struct {
		result1 gravelmap.Weight
	}{result1}
}

func (fake *FakeWeighter) WeightElevationReturnsOnCall(i int, result1 gravelmap.Weight) {
	fake.weightElevationMutex.Lock()
	defer fake.weightElevationMutex.Unlock()
	fake.WeightElevationStub = nil
	if fake.weightElevationReturnsOnCall == nil {
		fake.weightElevationReturnsOnCall = make(map[int]struct {
			result1 gravelmap.Weight
		})
	}
	fake.weightElevationReturnsOnCall[i] = struct {
		result1 gravelmap.Weight
	}{result1}
}

func (fake *FakeWeighter) WeightOffRoad(arg1 int8) float64 {
	fake.weightOffRoadMutex.Lock()
	ret, specificReturn := fake.weightOffRoadReturnsOnCall[len(fake.weightOffRoadArgsForCall)]
	fake.weightOffRoadArgsForCall = append(fake.weightOffRoadArgsForCall, struct {
		arg1 int8
	}{arg1})
	fake.recordInvocation("WeightOffRoad", []interface{}{arg1})
	fake.weightOffRoadMutex.Unlock()
	if fake.WeightOffRoadStub != nil {
		return fake.WeightOffRoadStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.weightOffRoadReturns
	return fakeReturns.result1
}

func (fake *FakeWeighter) WeightOffRoadCallCount() int {
	fake.weightOffRoadMutex.RLock()
	defer fake.weightOffRoadMutex.RUnlock()
	return len(fake.weightOffRoadArgsForCall)
}

func (fake *FakeWeighter) WeightOffRoadCalls(stub func(int8) float64) {
	fake.weightOffRoadMutex.Lock()
	defer fake.weightOffRoadMutex.Unlock()
	fake.WeightOffRoadStub = stub
}

func (fake *FakeWeighter) WeightOffRoadArgsForCall(i int) int8 {
	fake.weightOffRoadMutex.RLock()
	defer fake.weightOffRoadMutex.RUnlock()
	argsForCall := fake.weightOffRoadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWeighter) WeightOffRoadReturns(result1 float64) {
	fake.weightOffRoadMutex.Lock()
	defer fake.weightOffRoadMutex.Unlock()
	fake.WeightOffRoadStub = nil
	fake.weightOffRoadReturns = struct {
		result1 float64
	}{result1}
}

func (fake *FakeWeighter) WeightOffRoadReturnsOnCall(i int, result1 float64) {
	fake.weightOffRoadMutex.Lock()
	defer fake.weightOffRoadMutex.Unlock()
	fake.WeightOffRoadStub = nil
	if fake.weightOffRoadReturnsOnCall == nil {
		fake.weightOffRoadReturnsOnCall = make(map[int]struct {
			result1 float64
		})
	}
	fake.weightOffRoadReturnsOnCall[i] = struct {
		result1 float64
	}{result1}
}

func (fake *FakeWeighter) WeightVehicleAcceptance(arg1 map[string]string) float64 {
	fake.weightVehicleAcceptanceMutex.Lock()
	ret, specificReturn := fake.weightVehicleAcceptanceReturnsOnCall[len(fake.weightVehicleAcceptanceArgsForCall)]
	fake.weightVehicleAcceptanceArgsForCall = append(fake.weightVehicleAcceptanceArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	fake.recordInvocation("WeightVehicleAcceptance", []interface{}{arg1})
	fake.weightVehicleAcceptanceMutex.Unlock()
	if fake.WeightVehicleAcceptanceStub != nil {
		return fake.WeightVehicleAcceptanceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.weightVehicleAcceptanceReturns
	return fakeReturns.result1
}

func (fake *FakeWeighter) WeightVehicleAcceptanceCallCount() int {
	fake.weightVehicleAcceptanceMutex.RLock()
	defer fake.weightVehicleAcceptanceMutex.RUnlock()
	return len(fake.weightVehicleAcceptanceArgsForCall)
}

func (fake *FakeWeighter) WeightVehicleAcceptanceCalls(stub func(map[string]string) float64) {
	fake.weightVehicleAcceptanceMutex.Lock()
	defer fake.weightVehicleAcceptanceMutex.Unlock()
	fake.WeightVehicleAcceptanceStub = stub
}

func (fake *FakeWeighter) WeightVehicleAcceptanceArgsForCall(i int) map[string]string {
	fake.weightVehicleAcceptanceMutex.RLock()
	defer fake.weightVehicleAcceptanceMutex.RUnlock()
	argsForCall := fake.weightVehicleAcceptanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWeighter) WeightVehicleAcceptanceReturns(result1 float64) {
	fake.weightVehicleAcceptanceMutex.Lock()
	defer fake.weightVehicleAcceptanceMutex.Unlock()
	fake.WeightVehicleAcceptanceStub = nil
	fake.weightVehicleAcceptanceReturns = struct {
		result1 float64
	}{result1}
}

func (fake *FakeWeighter) WeightVehicleAcceptanceReturnsOnCall(i int, result1 float64) {
	fake.weightVehicleAcceptanceMutex.Lock()
	defer fake.weightVehicleAcceptanceMutex.Unlock()
	fake.WeightVehicleAcceptanceStub = nil
	if fake.weightVehicleAcceptanceReturnsOnCall == nil {
		fake.weightVehicleAcceptanceReturnsOnCall = make(map[int]struct {
			result1 float64
		})
	}
	fake.weightVehicleAcceptanceReturnsOnCall[i] = struct {
		result1 float64
	}{result1}
}

func (fake *FakeWeighter) WeightWayAcceptance(arg1 map[string]string) gravelmap.Weight {
	fake.weightWayAcceptanceMutex.Lock()
	ret, specificReturn := fake.weightWayAcceptanceReturnsOnCall[len(fake.weightWayAcceptanceArgsForCall)]
	fake.weightWayAcceptanceArgsForCall = append(fake.weightWayAcceptanceArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	fake.recordInvocation("WeightWayAcceptance", []interface{}{arg1})
	fake.weightWayAcceptanceMutex.Unlock()
	if fake.WeightWayAcceptanceStub != nil {
		return fake.WeightWayAcceptanceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.weightWayAcceptanceReturns
	return fakeReturns.result1
}

func (fake *FakeWeighter) WeightWayAcceptanceCallCount() int {
	fake.weightWayAcceptanceMutex.RLock()
	defer fake.weightWayAcceptanceMutex.RUnlock()
	return len(fake.weightWayAcceptanceArgsForCall)
}

func (fake *FakeWeighter) WeightWayAcceptanceCalls(stub func(map[string]string) gravelmap.Weight) {
	fake.weightWayAcceptanceMutex.Lock()
	defer fake.weightWayAcceptanceMutex.Unlock()
	fake.WeightWayAcceptanceStub = stub
}

func (fake *FakeWeighter) WeightWayAcceptanceArgsForCall(i int) map[string]string {
	fake.weightWayAcceptanceMutex.RLock()
	defer fake.weightWayAcceptanceMutex.RUnlock()
	argsForCall := fake.weightWayAcceptanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWeighter) WeightWayAcceptanceReturns(result1 gravelmap.Weight) {
	fake.weightWayAcceptanceMutex.Lock()
	defer fake.weightWayAcceptanceMutex.Unlock()
	fake.WeightWayAcceptanceStub = nil
	fake.weightWayAcceptanceReturns = struct {
		result1 gravelmap.Weight
	}{result1}
}

func (fake *FakeWeighter) WeightWayAcceptanceReturnsOnCall(i int, result1 gravelmap.Weight) {
	fake.weightWayAcceptanceMutex.Lock()
	defer fake.weightWayAcceptanceMutex.Unlock()
	fake.WeightWayAcceptanceStub = nil
	if fake.weightWayAcceptanceReturnsOnCall == nil {
		fake.weightWayAcceptanceReturnsOnCall = make(map[int]struct {
			result1 gravelmap.Weight
		})
	}
	fake.weightWayAcceptanceReturnsOnCall[i] = struct {
		result1 gravelmap.Weight
	}{result1}
}

func (fake *FakeWeighter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.weightElevationMutex.RLock()
	defer fake.weightElevationMutex.RUnlock()
	fake.weightOffRoadMutex.RLock()
	defer fake.weightOffRoadMutex.RUnlock()
	fake.weightVehicleAcceptanceMutex.RLock()
	defer fake.weightVehicleAcceptanceMutex.RUnlock()
	fake.weightWayAcceptanceMutex.RLock()
	defer fake.weightWayAcceptanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWeighter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gravelmap.Weighter = new(FakeWeighter)
